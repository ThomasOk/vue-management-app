// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { AppControllerGetHelloError, AppControllerGetHelloResponse, ProjectsControllerCreateData, ProjectsControllerCreateError, ProjectsControllerCreateResponse, ProjectsControllerFindAllError, ProjectsControllerFindAllResponse, ProjectsControllerFindOneData, ProjectsControllerFindOneError, ProjectsControllerFindOneResponse, ProjectsControllerUpdateData, ProjectsControllerUpdateError, ProjectsControllerUpdateResponse, ProjectsControllerRemoveData, ProjectsControllerRemoveError, ProjectsControllerRemoveResponse, TasksControllerCreateData, TasksControllerCreateError, TasksControllerCreateResponse, TasksControllerFindAllError, TasksControllerFindAllResponse, TasksControllerFindOneData, TasksControllerFindOneError, TasksControllerFindOneResponse, TasksControllerUpdateData, TasksControllerUpdateError, TasksControllerUpdateResponse, TasksControllerRemoveData, TasksControllerRemoveError, TasksControllerRemoveResponse } from './types.gen';

export const client = createClient(createConfig());

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * Create a new project
 */
export const projectsControllerCreate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ProjectsControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProjectsControllerCreateResponse, ProjectsControllerCreateError, ThrowOnError>({
        ...options,
        url: '/projects'
    });
};

/**
 * Get all projects
 */
export const projectsControllerFindAll = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ProjectsControllerFindAllResponse, ProjectsControllerFindAllError, ThrowOnError>({
        ...options,
        url: '/projects'
    });
};

/**
 * Get a project by id
 */
export const projectsControllerFindOne = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ProjectsControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProjectsControllerFindOneResponse, ProjectsControllerFindOneError, ThrowOnError>({
        ...options,
        url: '/projects/{id}'
    });
};

/**
 * Update a project
 */
export const projectsControllerUpdate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ProjectsControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<ProjectsControllerUpdateResponse, ProjectsControllerUpdateError, ThrowOnError>({
        ...options,
        url: '/projects/{id}'
    });
};

/**
 * Delete a project
 */
export const projectsControllerRemove = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ProjectsControllerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ProjectsControllerRemoveResponse, ProjectsControllerRemoveError, ThrowOnError>({
        ...options,
        url: '/projects/{id}'
    });
};

/**
 * Create a new task
 */
export const tasksControllerCreate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TasksControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<TasksControllerCreateResponse, TasksControllerCreateError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Get all tasks
 */
export const tasksControllerFindAll = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TasksControllerFindAllResponse, TasksControllerFindAllError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Get a task by id
 */
export const tasksControllerFindOne = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TasksControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<TasksControllerFindOneResponse, TasksControllerFindOneError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};

/**
 * Update a task
 */
export const tasksControllerUpdate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TasksControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<TasksControllerUpdateResponse, TasksControllerUpdateError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};

/**
 * Delete a task
 */
export const tasksControllerRemove = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TasksControllerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TasksControllerRemoveResponse, TasksControllerRemoveError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};